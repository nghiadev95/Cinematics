//
//  OnboardingPresenter.swift
//  Cinematics
//
//  Created by Nghia Nguyen on 5/31/20.
//  Copyright (c) 2020 Nghia Nguyen. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import Foundation
import RxCocoa
import RxSwift
import UIKit

final class OnboardingPresenter {
    // MARK: - Private properties -

    private unowned let view: OnboardingViewInterface
    private let interactor: OnboardingInteractorInterface
    private let wireframe: OnboardingWireframeInterface

    private var currentPageIndex = 0
    private let totalPage = 3

    // MARK: - Lifecycle -

    init(view: OnboardingViewInterface, interactor: OnboardingInteractorInterface, wireframe: OnboardingWireframeInterface) {
        self.view = view
        self.interactor = interactor
        self.wireframe = wireframe
    }
}

// MARK: - Extensions -

extension OnboardingPresenter: OnboardingPresenterInterface {
    func configure(with output: Onboarding.ViewOutput) -> Onboarding.ViewInput {
        let inputSteam = output.nextAction.flatMapLatest { [weak self] _ -> Observable<(index: Int, image: UIImage)> in
            guard let strongSelf = self, strongSelf.currentPageIndex < strongSelf.totalPage - 1 else {
                self?.wireframe.navigate(to: .home)
                return Observable<(index: Int, image: UIImage)>.empty()
            }
            strongSelf.currentPageIndex += 1
            let nextImage = strongSelf.currentPageIndex == strongSelf.totalPage - 1 ? RImage.get_started_button()! : RImage.next_button()!
            return Observable<(index: Int, image: UIImage)>.just((strongSelf.currentPageIndex, nextImage))
        }
        .startWith((index: currentPageIndex, image: RImage.next_button()!))
        .share()

        return Onboarding.ViewInput(index: inputSteam.map { $0.index }.asDriver(onErrorJustReturn: 0),
                                    nextButtonImage: inputSteam.map { $0.image }.asDriver(onErrorJustReturn: RImage.get_started_button()!))
    }
}
